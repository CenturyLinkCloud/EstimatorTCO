(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);throw new Error("Cannot find module '"+o+"'")}var f=n[o]={exports:{}};t[o][0].call(f.exports,function(e){var n=t[o][1][e];return s(n?n:e)},f,f.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
var PricingMapsCollection, PricingModel;

PricingModel = require('../models/PricingMapModel.coffee');

PricingMapsCollection = Backbone.Collection.extend({
  model: PricingModel,
  url: "json/pricing.json",
  initialize: function() {
    return this.fetch();
  },
  forKey: function(type) {
    return _.first(this.where({
      "type": type
    }));
  }
});

module.exports = PricingMapsCollection;


},{"../models/PricingMapModel.coffee":2}],2:[function(require,module,exports){
var PricingMapModel;

PricingMapModel = Backbone.Model.extend({
  initialize: function() {}
});

module.exports = PricingMapModel;


},{}],3:[function(require,module,exports){
var ServerModel;

ServerModel = Backbone.Model.extend({
  HOURS_PER_DAY: "hours_per_day",
  HOURS_PER_WEEK: "hours_per_week",
  HOURS_PER_MONTH: "hours_per_month",
  PERCENTAGE_OF_MONTH: "percentage_of_month",
  HOURS_IN_MONTH: 730,
  DAYS_IN_MONTH: 30.41666667,
  WEEKS_IN_MONTH: 4.345238095,
  defaults: {
    type: "standard",
    os: "linux",
    cpu: 1,
    memory: 1,
    storage: 1,
    quantity: 1,
    usagePeriod: "percentage_of_month",
    usage: 100
  },
  initialize: function() {
    return this.initPricing();
  },
  initPricing: function() {
    var pricing;
    pricing = this.get("pricingMap").attributes.options;
    return this.set("pricing", pricing);
  },
  totalCpuPerHour: function() {
    return this.get("cpu") * this.get("pricing").cpu;
  },
  totalMemoryPerHour: function() {
    return this.get("memory") * this.get("pricing").memory;
  },
  totalOSPerHour: function() {
    return this.get("pricing").os[this.get("os")] * this.get("cpu");
  },
  utilityPricePerHourPerInstance: function() {
    return this.totalCpuPerHour() + this.totalMemoryPerHour() + this.totalOSPerHour();
  },
  utilityPricePerHourTotal: function() {
    return this.utilityPricePerHourPerInstance() * this.get("quantity");
  },
  storagePricePerMonth: function() {
    var type;
    type = this.get("type");
    return this.get("storage") * this.get("pricing").storage[type] * this.get("quantity");
  },
  totalOSPricePerMonth: function() {
    switch (this.get("usagePeriod")) {
      case this.HOURS_PER_DAY:
        return this.totalOSPerHour() * this.get("usage") * this.DAYS_IN_MONTH;
      case this.HOURS_PER_WEEK:
        return this.totalOSPerHour() * this.get("usage") * this.WEEKS_IN_MONTH;
      case this.HOURS_PER_MONTH:
        return this.totalOSPerHour() * this.get("usage");
      case this.PERCENTAGE_OF_MONTH:
        return this.get("usage") / 100 * this.HOURS_IN_MONTH * this.totalOSPerHour();
    }
  },
  totalPricePerMonth: function() {
    var utilityPerMonth;
    utilityPerMonth = 0;
    switch (this.get("usagePeriod")) {
      case this.HOURS_PER_DAY:
        utilityPerMonth = this.utilityPricePerHourTotal() * this.get("usage") * this.DAYS_IN_MONTH;
        break;
      case this.HOURS_PER_WEEK:
        utilityPerMonth = this.utilityPricePerHourTotal() * this.get("usage") * this.WEEKS_IN_MONTH;
        break;
      case this.HOURS_PER_MONTH:
        utilityPerMonth = this.utilityPricePerHourTotal() * this.get("usage");
        break;
      case this.PERCENTAGE_OF_MONTH:
        utilityPerMonth = this.get("usage") / 100 * this.HOURS_IN_MONTH * this.utilityPricePerHourTotal();
    }
    return utilityPerMonth + this.storagePricePerMonth();
  }
});

module.exports = ServerModel;


},{}],4:[function(require,module,exports){
require('./spec/ServerModelSpec.coffee');


},{"./spec/ServerModelSpec.coffee":5}],5:[function(require,module,exports){
var PricingMapsCollection, ServerModel;

ServerModel = require('../../source/js/app/models/ServerModel.coffee');

PricingMapsCollection = require('../../source/js/app/collections/PricingMapsCollection.coffee');

describe('Server', function() {
  it('should exist', (function(_this) {
    return function(done) {
      var pricingMaps;
      pricingMaps = new PricingMapsCollection();
      return pricingMaps.on("sync", function() {
        var server, serverPricingMap;
        serverPricingMap = pricingMaps.forKey("server");
        server = new ServerModel({
          pricingMap: serverPricingMap
        });
        expect(server).to.exist;
        return done();
      });
    };
  })(this));
  it('should calculate CPU price per hour', (function(_this) {
    return function(done) {
      var pricingMaps;
      pricingMaps = new PricingMapsCollection();
      return pricingMaps.on("sync", function() {
        var server, serverPricingMap;
        serverPricingMap = pricingMaps.forKey("server");
        server = new ServerModel({
          pricingMap: serverPricingMap
        });
        expect(server.totalCpuPerHour()).to.equal(0.01);
        server.set("cpu", 2);
        expect(server.totalCpuPerHour()).to.equal(0.02);
        return done();
      });
    };
  })(this));
  it('should calculate memory price per hour', (function(_this) {
    return function(done) {
      var pricingMaps;
      pricingMaps = new PricingMapsCollection();
      return pricingMaps.on("sync", function() {
        var server, serverPricingMap;
        serverPricingMap = pricingMaps.forKey("server");
        server = new ServerModel({
          pricingMap: serverPricingMap
        });
        expect(server.totalMemoryPerHour()).to.equal(0.015);
        server.set("memory", 2);
        expect(server.totalMemoryPerHour()).to.equal(0.03);
        return done();
      });
    };
  })(this));
  it('should calculate os price per hour', (function(_this) {
    return function(done) {
      var pricingMaps;
      pricingMaps = new PricingMapsCollection();
      return pricingMaps.on("sync", function() {
        var server, serverPricingMap;
        serverPricingMap = pricingMaps.forKey("server");
        server = new ServerModel({
          pricingMap: serverPricingMap
        });
        expect(server.totalOSPerHour()).to.equal(0);
        server.set("os", "windows");
        expect(server.totalOSPerHour()).to.equal(0.04);
        server.set("os", "redhat");
        expect(server.totalOSPerHour()).to.equal(0.04);
        return done();
      });
    };
  })(this));
  it('should calculate utility price per hour per instance', (function(_this) {
    return function(done) {
      var pricingMaps;
      pricingMaps = new PricingMapsCollection();
      return pricingMaps.on("sync", function() {
        var server, serverPricingMap;
        serverPricingMap = pricingMaps.forKey("server");
        server = new ServerModel({
          pricingMap: serverPricingMap
        });
        expect(server.utilityPricePerHourPerInstance()).to.equal(0.025);
        return done();
      });
    };
  })(this));
  it('should calculate utility price per hour', (function(_this) {
    return function(done) {
      var pricingMaps;
      pricingMaps = new PricingMapsCollection();
      return pricingMaps.on("sync", function() {
        var server, serverPricingMap;
        serverPricingMap = pricingMaps.forKey("server");
        server = new ServerModel({
          pricingMap: serverPricingMap
        });
        server.set("quantity", 2);
        expect(server.utilityPricePerHourTotal()).to.equal(0.05);
        return done();
      });
    };
  })(this));
  it('should calculate storage price per month', (function(_this) {
    return function(done) {
      var pricingMaps;
      pricingMaps = new PricingMapsCollection();
      return pricingMaps.on("sync", function() {
        var server, serverPricingMap;
        serverPricingMap = pricingMaps.forKey("server");
        server = new ServerModel({
          pricingMap: serverPricingMap
        });
        expect(server.storagePricePerMonth()).to.equal(0.15);
        server.set("storage", 200);
        server.set("type", "premium");
        expect(server.storagePricePerMonth()).to.equal(100);
        return done();
      });
    };
  })(this));
  return it('should calculate total price per month', (function(_this) {
    return function(done) {
      var pricingMaps;
      pricingMaps = new PricingMapsCollection();
      return pricingMaps.on("sync", function() {
        var server, serverPricingMap;
        serverPricingMap = pricingMaps.forKey("server");
        server = new ServerModel({
          pricingMap: serverPricingMap
        });
        expect(server.totalPricePerMonth()).to.equal(18.15);
        return done();
      });
    };
  })(this));
});


},{"../../source/js/app/collections/PricingMapsCollection.coffee":1,"../../source/js/app/models/ServerModel.coffee":3}]},{},[4])
//# sourceMappingURL=data:application/json;base64,
